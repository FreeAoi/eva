generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Career {
  id   Int    @id @default(autoincrement())
  name String

  groups   Group[]
  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id   String @id
  name String

  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  about String?

  generalObjective  String?
  specificObjective String?

  tasks Task[]
}

model Task {
  id    Int    @id @default(autoincrement())
  title String

  maxScore Int

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  dueDate   DateTime
  deleted   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  attachments Attachment[]
  submissions TaskSubmission[]
}

model TaskSubmission {
  id Int @id @default(autoincrement())

  taskId Int
  task   Task @relation(fields: [taskId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  score     Int     @default(0)
  qualified Boolean @default(false)
  comment   String?

  attachments Attachment[]

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id   Int    @id @default(autoincrement())
  name String
  url  String

  taskId Int?
  task   Task? @relation(fields: [taskId], references: [id])

  submissionId Int?
  submission   TaskSubmission? @relation(fields: [submissionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id   String @id
  name String

  careerId Int
  career   Career @relation(fields: [careerId], references: [id])

  students Student[]
  courses  Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id          String  @id
  email       String  @unique
  firstName   String
  lastName    String
  password    String

  description String?
  city        String?

  avatar      String  @default("https://secure.gravatar.com/avatar/9e1cae43686b4e7202116ba6b1a83b6b?s=100&d=mm")
  role        Role    @default(STUDENT)

  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id])

  careerId Int
  career   Career @relation(fields: [careerId], references: [id])

  deleted         DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  taskSubmissions TaskSubmission[]
}

model Teacher {
  id        String @id
  email     String @unique
  firstName String
  lastName  String
  password  String
  role      Role @default(TEACHER)
  avatar    String @default("https://secure.gravatar.com/avatar/9e1cae43686b4e7202116ba6b1a83b6b?s=100&d=mm")

  faculty String
  courses Course[]

  deleted        DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  qualifiedTasks TaskSubmission[]
}

enum Role {
  STUDENT
  TEACHER
}