/* tslint:disable */
/* eslint-disable */
/**
 * EVA API
 * The EVA API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { TaskDTO } from '../models';
import { TaskDTOFromJSON, TaskDTOToJSON } from '../models';

export interface TaskControllerGetTaskRequest {
    taskId: string;
    authorization: string;
    filter?: string;
}

export interface TaskControllerSubmitTaskRequest {
    taskId: string;
}

/**
 * TaskApi - interface
 *
 * @export
 * @interface TaskApiInterface
 */
export interface TaskApiInterface {
    /**
     *
     * @param {string} taskId Task id
     * @param {string} authorization Bearer token
     * @param {string} [filter] Student id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskControllerGetTaskRaw(
        requestParameters: TaskControllerGetTaskRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<TaskDTO>>;

    /**
     */
    taskControllerGetTask(
        requestParameters: TaskControllerGetTaskRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<TaskDTO>;

    /**
     *
     * @param {string} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskControllerSubmitTaskRaw(
        requestParameters: TaskControllerSubmitTaskRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>>;

    /**
     */
    taskControllerSubmitTask(
        requestParameters: TaskControllerSubmitTaskRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void>;
}

/**
 *
 */
export class TaskApi extends runtime.BaseAPI implements TaskApiInterface {
    /**
     */
    async taskControllerGetTaskRaw(
        requestParameters: TaskControllerGetTaskRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<TaskDTO>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter requestParameters.taskId was null or undefined when calling taskControllerGetTask.'
            );
        }

        if (
            requestParameters.authorization === null ||
            requestParameters.authorization === undefined
        ) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter requestParameters.authorization was null or undefined when calling taskControllerGetTask.'
            );
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (
            requestParameters.authorization !== undefined &&
            requestParameters.authorization !== null
        ) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request(
            {
                path: `/api/task/{taskId}`.replace(
                    `{${'taskId'}}`,
                    encodeURIComponent(String(requestParameters.taskId))
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            TaskDTOFromJSON(jsonValue)
        );
    }

    /**
     */
    async taskControllerGetTask(
        requestParameters: TaskControllerGetTaskRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<TaskDTO> {
        const response = await this.taskControllerGetTaskRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     */
    async taskControllerSubmitTaskRaw(
        requestParameters: TaskControllerSubmitTaskRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter requestParameters.taskId was null or undefined when calling taskControllerSubmitTask.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/task/{taskId}/submit`.replace(
                    `{${'taskId'}}`,
                    encodeURIComponent(String(requestParameters.taskId))
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async taskControllerSubmitTask(
        requestParameters: TaskControllerSubmitTaskRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.taskControllerSubmitTaskRaw(requestParameters, initOverrides);
    }
}
