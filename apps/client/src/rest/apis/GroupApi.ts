/* tslint:disable */
/* eslint-disable */
/**
 * EVA API
 * The EVA API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { CreateGroupDTO, GroupEntity, UpdateGroupDTO } from '../models';
import {
    CreateGroupDTOFromJSON,
    CreateGroupDTOToJSON,
    GroupEntityFromJSON,
    GroupEntityToJSON,
    UpdateGroupDTOFromJSON,
    UpdateGroupDTOToJSON
} from '../models';

export interface GroupControllerCreateGroupRequest {
    createGroupDTO: CreateGroupDTO;
}

export interface GroupControllerGetGroupRequest {
    id: string;
}

export interface GroupControllerUpdateGroupRequest {
    id: string;
    updateGroupDTO: UpdateGroupDTO;
}

/**
 * GroupApi - interface
 *
 * @export
 * @interface GroupApiInterface
 */
export interface GroupApiInterface {
    /**
     *
     * @param {CreateGroupDTO} createGroupDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    groupControllerCreateGroupRaw(
        requestParameters: GroupControllerCreateGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<GroupEntity>>;

    /**
     */
    groupControllerCreateGroup(
        requestParameters: GroupControllerCreateGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<GroupEntity>;

    /**
     *
     * @param {string} id Group id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    groupControllerGetGroupRaw(
        requestParameters: GroupControllerGetGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<GroupEntity>>;

    /**
     */
    groupControllerGetGroup(
        requestParameters: GroupControllerGetGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<GroupEntity>;

    /**
     *
     * @param {string} id Group id
     * @param {UpdateGroupDTO} updateGroupDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    groupControllerUpdateGroupRaw(
        requestParameters: GroupControllerUpdateGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<GroupEntity>>;

    /**
     */
    groupControllerUpdateGroup(
        requestParameters: GroupControllerUpdateGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<GroupEntity>;
}

/**
 *
 */
export class GroupApi extends runtime.BaseAPI implements GroupApiInterface {
    /**
     */
    async groupControllerCreateGroupRaw(
        requestParameters: GroupControllerCreateGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<GroupEntity>> {
        if (
            requestParameters.createGroupDTO === null ||
            requestParameters.createGroupDTO === undefined
        ) {
            throw new runtime.RequiredError(
                'createGroupDTO',
                'Required parameter requestParameters.createGroupDTO was null or undefined when calling groupControllerCreateGroup.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/api/group`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreateGroupDTOToJSON(requestParameters.createGroupDTO)
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            GroupEntityFromJSON(jsonValue)
        );
    }

    /**
     */
    async groupControllerCreateGroup(
        requestParameters: GroupControllerCreateGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<GroupEntity> {
        const response = await this.groupControllerCreateGroupRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     */
    async groupControllerGetGroupRaw(
        requestParameters: GroupControllerGetGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<GroupEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter requestParameters.id was null or undefined when calling groupControllerGetGroup.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/group/{id}`.replace(
                    `{${'id'}}`,
                    encodeURIComponent(String(requestParameters.id))
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            GroupEntityFromJSON(jsonValue)
        );
    }

    /**
     */
    async groupControllerGetGroup(
        requestParameters: GroupControllerGetGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<GroupEntity> {
        const response = await this.groupControllerGetGroupRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     */
    async groupControllerUpdateGroupRaw(
        requestParameters: GroupControllerUpdateGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<GroupEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter requestParameters.id was null or undefined when calling groupControllerUpdateGroup.'
            );
        }

        if (
            requestParameters.updateGroupDTO === null ||
            requestParameters.updateGroupDTO === undefined
        ) {
            throw new runtime.RequiredError(
                'updateGroupDTO',
                'Required parameter requestParameters.updateGroupDTO was null or undefined when calling groupControllerUpdateGroup.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/api/group/{id}`.replace(
                    `{${'id'}}`,
                    encodeURIComponent(String(requestParameters.id))
                ),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateGroupDTOToJSON(requestParameters.updateGroupDTO)
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            GroupEntityFromJSON(jsonValue)
        );
    }

    /**
     */
    async groupControllerUpdateGroup(
        requestParameters: GroupControllerUpdateGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<GroupEntity> {
        const response = await this.groupControllerUpdateGroupRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }
}
