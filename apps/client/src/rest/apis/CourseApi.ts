/* tslint:disable */
/* eslint-disable */
/**
 * EVA API
 * The EVA API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { CourseDTO, CreateCourseDTO, UpdateCourseDTO } from '../models';
import {
    CourseDTOFromJSON,
    CourseDTOToJSON,
    CreateCourseDTOFromJSON,
    CreateCourseDTOToJSON,
    UpdateCourseDTOFromJSON,
    UpdateCourseDTOToJSON
} from '../models';

export interface CourseControllerCreateCourseRequest {
    authorization: string;
    createCourseDTO: CreateCourseDTO;
}

export interface CourseControllerGetCourseRequest {
    courseId: any;
    authorization: string;
}

export interface CourseControllerUpdateCourseRequest {
    courseId: any;
    authorization: string;
    updateCourseDTO: UpdateCourseDTO;
}

/**
 * CourseApi - interface
 *
 * @export
 * @interface CourseApiInterface
 */
export interface CourseApiInterface {
    /**
     *
     * @param {string} authorization Bearer token
     * @param {CreateCourseDTO} createCourseDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseControllerCreateCourseRaw(
        requestParameters: CourseControllerCreateCourseRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<CourseDTO>>;

    /**
     */
    courseControllerCreateCourse(
        requestParameters: CourseControllerCreateCourseRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<CourseDTO>;

    /**
     *
     * @param {any} courseId Course id
     * @param {string} authorization Bearer token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseControllerGetCourseRaw(
        requestParameters: CourseControllerGetCourseRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<CourseDTO>>;

    /**
     */
    courseControllerGetCourse(
        requestParameters: CourseControllerGetCourseRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<CourseDTO>;

    /**
     *
     * @param {any} courseId Course id
     * @param {string} authorization Bearer token
     * @param {UpdateCourseDTO} updateCourseDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseControllerUpdateCourseRaw(
        requestParameters: CourseControllerUpdateCourseRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<CourseDTO>>;

    /**
     */
    courseControllerUpdateCourse(
        requestParameters: CourseControllerUpdateCourseRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<CourseDTO>;
}

/**
 *
 */
export class CourseApi extends runtime.BaseAPI implements CourseApiInterface {
    /**
     */
    async courseControllerCreateCourseRaw(
        requestParameters: CourseControllerCreateCourseRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<CourseDTO>> {
        if (
            requestParameters.authorization === null ||
            requestParameters.authorization === undefined
        ) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter requestParameters.authorization was null or undefined when calling courseControllerCreateCourse.'
            );
        }

        if (
            requestParameters.createCourseDTO === null ||
            requestParameters.createCourseDTO === undefined
        ) {
            throw new runtime.RequiredError(
                'createCourseDTO',
                'Required parameter requestParameters.createCourseDTO was null or undefined when calling courseControllerCreateCourse.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (
            requestParameters.authorization !== undefined &&
            requestParameters.authorization !== null
        ) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request(
            {
                path: `/api/course`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreateCourseDTOToJSON(requestParameters.createCourseDTO)
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CourseDTOFromJSON(jsonValue)
        );
    }

    /**
     */
    async courseControllerCreateCourse(
        requestParameters: CourseControllerCreateCourseRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<CourseDTO> {
        const response = await this.courseControllerCreateCourseRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     */
    async courseControllerGetCourseRaw(
        requestParameters: CourseControllerGetCourseRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<CourseDTO>> {
        if (
            requestParameters.courseId === null ||
            requestParameters.courseId === undefined
        ) {
            throw new runtime.RequiredError(
                'courseId',
                'Required parameter requestParameters.courseId was null or undefined when calling courseControllerGetCourse.'
            );
        }

        if (
            requestParameters.authorization === null ||
            requestParameters.authorization === undefined
        ) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter requestParameters.authorization was null or undefined when calling courseControllerGetCourse.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (
            requestParameters.authorization !== undefined &&
            requestParameters.authorization !== null
        ) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request(
            {
                path: `/api/course/{courseId}`.replace(
                    `{${'courseId'}}`,
                    encodeURIComponent(String(requestParameters.courseId))
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CourseDTOFromJSON(jsonValue)
        );
    }

    /**
     */
    async courseControllerGetCourse(
        requestParameters: CourseControllerGetCourseRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<CourseDTO> {
        const response = await this.courseControllerGetCourseRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     */
    async courseControllerUpdateCourseRaw(
        requestParameters: CourseControllerUpdateCourseRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<CourseDTO>> {
        if (
            requestParameters.courseId === null ||
            requestParameters.courseId === undefined
        ) {
            throw new runtime.RequiredError(
                'courseId',
                'Required parameter requestParameters.courseId was null or undefined when calling courseControllerUpdateCourse.'
            );
        }

        if (
            requestParameters.authorization === null ||
            requestParameters.authorization === undefined
        ) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter requestParameters.authorization was null or undefined when calling courseControllerUpdateCourse.'
            );
        }

        if (
            requestParameters.updateCourseDTO === null ||
            requestParameters.updateCourseDTO === undefined
        ) {
            throw new runtime.RequiredError(
                'updateCourseDTO',
                'Required parameter requestParameters.updateCourseDTO was null or undefined when calling courseControllerUpdateCourse.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (
            requestParameters.authorization !== undefined &&
            requestParameters.authorization !== null
        ) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request(
            {
                path: `/api/course/{courseId}`.replace(
                    `{${'courseId'}}`,
                    encodeURIComponent(String(requestParameters.courseId))
                ),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateCourseDTOToJSON(requestParameters.updateCourseDTO)
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CourseDTOFromJSON(jsonValue)
        );
    }

    /**
     */
    async courseControllerUpdateCourse(
        requestParameters: CourseControllerUpdateCourseRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<CourseDTO> {
        const response = await this.courseControllerUpdateCourseRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }
}
