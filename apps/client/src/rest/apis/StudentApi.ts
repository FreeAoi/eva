/* tslint:disable */
/* eslint-disable */
/**
 * EVA API
 * The EVA API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { RegisterStudentDTO, StudentDTO } from '../models';
import {
    RegisterStudentDTOFromJSON,
    RegisterStudentDTOToJSON,
    StudentDTOFromJSON,
    StudentDTOToJSON
} from '../models';

export interface StudentControllerRegisterStudentRequest {
    registerStudentDTO: RegisterStudentDTO;
}

export interface StudentControllerUpdateStudentRequest {
    password?: string;
    description?: string | null;
    city?: string | null;
    avatar?: Blob;
}

/**
 * StudentApi - interface
 *
 * @export
 * @interface StudentApiInterface
 */
export interface StudentApiInterface {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    studentControllerGetMeRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<StudentDTO>>;

    /**
     */
    studentControllerGetMe(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<StudentDTO>;

    /**
     *
     * @param {RegisterStudentDTO} registerStudentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    studentControllerRegisterStudentRaw(
        requestParameters: StudentControllerRegisterStudentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<StudentDTO>>;

    /**
     */
    studentControllerRegisterStudent(
        requestParameters: StudentControllerRegisterStudentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<StudentDTO>;

    /**
     *
     * @param {string} [password] Student password
     * @param {string} [description] Student description
     * @param {string} [city] Student description
     * @param {Blob} [avatar] user avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    studentControllerUpdateStudentRaw(
        requestParameters: StudentControllerUpdateStudentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<StudentDTO>>;

    /**
     */
    studentControllerUpdateStudent(
        requestParameters: StudentControllerUpdateStudentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<StudentDTO>;
}

/**
 *
 */
export class StudentApi extends runtime.BaseAPI implements StudentApiInterface {
    /**
     */
    async studentControllerGetMeRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<StudentDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/student/me`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            StudentDTOFromJSON(jsonValue)
        );
    }

    /**
     */
    async studentControllerGetMe(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<StudentDTO> {
        const response = await this.studentControllerGetMeRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async studentControllerRegisterStudentRaw(
        requestParameters: StudentControllerRegisterStudentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<StudentDTO>> {
        if (
            requestParameters.registerStudentDTO === null ||
            requestParameters.registerStudentDTO === undefined
        ) {
            throw new runtime.RequiredError(
                'registerStudentDTO',
                'Required parameter requestParameters.registerStudentDTO was null or undefined when calling studentControllerRegisterStudent.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/api/student/create`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: RegisterStudentDTOToJSON(requestParameters.registerStudentDTO)
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            StudentDTOFromJSON(jsonValue)
        );
    }

    /**
     */
    async studentControllerRegisterStudent(
        requestParameters: StudentControllerRegisterStudentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<StudentDTO> {
        const response = await this.studentControllerRegisterStudentRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     */
    async studentControllerUpdateStudentRaw(
        requestParameters: StudentControllerUpdateStudentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<StudentDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.city !== undefined) {
            formParams.append('city', requestParameters.city as any);
        }

        if (requestParameters.avatar !== undefined) {
            formParams.append('avatar', requestParameters.avatar as any);
        }

        const response = await this.request(
            {
                path: `/api/student/me`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: formParams
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            StudentDTOFromJSON(jsonValue)
        );
    }

    /**
     */
    async studentControllerUpdateStudent(
        requestParameters: StudentControllerUpdateStudentRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<StudentDTO> {
        const response = await this.studentControllerUpdateStudentRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }
}
