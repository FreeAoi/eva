/* tslint:disable */
/* eslint-disable */
/**
 * EVA API
 * The EVA API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TeacherCourses } from './TeacherCourses';
import {
    TeacherCoursesFromJSON,
    TeacherCoursesFromJSONTyped,
    TeacherCoursesToJSON
} from './TeacherCourses';

/**
 *
 * @export
 * @interface TeacherDTO
 */
export interface TeacherDTO {
    /**
     * Teacher id
     * @type {string}
     * @memberof TeacherDTO
     */
    id: string;
    /**
     * Teacher email
     * @type {string}
     * @memberof TeacherDTO
     */
    email: string;
    /**
     * Teacher first name
     * @type {string}
     * @memberof TeacherDTO
     */
    firstName: string;
    /**
     * Teacher last name
     * @type {string}
     * @memberof TeacherDTO
     */
    lastName: string;
    /**
     * Teacher role
     * @type {string}
     * @memberof TeacherDTO
     */
    role: TeacherDTORoleEnum;
    /**
     * Teacher avatar
     * @type {string}
     * @memberof TeacherDTO
     */
    avatar: string;
    /**
     * Teacher courses
     * @type {Array<TeacherCourses>}
     * @memberof TeacherDTO
     */
    courses: Array<TeacherCourses>;
}

/**
 * @export
 */
export const TeacherDTORoleEnum = {
    Student: 'STUDENT',
    Teacher: 'TEACHER'
} as const;
export type TeacherDTORoleEnum =
    (typeof TeacherDTORoleEnum)[keyof typeof TeacherDTORoleEnum];

/**
 * Check if a given object implements the TeacherDTO interface.
 */
export function instanceOfTeacherDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && 'id' in value;
    isInstance = isInstance && 'email' in value;
    isInstance = isInstance && 'firstName' in value;
    isInstance = isInstance && 'lastName' in value;
    isInstance = isInstance && 'role' in value;
    isInstance = isInstance && 'avatar' in value;
    isInstance = isInstance && 'courses' in value;

    return isInstance;
}

export function TeacherDTOFromJSON(json: any): TeacherDTO {
    return TeacherDTOFromJSONTyped(json, false);
}

export function TeacherDTOFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): TeacherDTO {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        id: json['id'],
        email: json['email'],
        firstName: json['firstName'],
        lastName: json['lastName'],
        role: json['role'],
        avatar: json['avatar'],
        courses: (json['courses'] as Array<any>).map(TeacherCoursesFromJSON)
    };
}

export function TeacherDTOToJSON(value?: TeacherDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        id: value.id,
        email: value.email,
        firstName: value.firstName,
        lastName: value.lastName,
        role: value.role,
        avatar: value.avatar,
        courses: (value.courses as Array<any>).map(TeacherCoursesToJSON)
    };
}
