/* tslint:disable */
/* eslint-disable */
/**
 * EVA API
 * The EVA API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StudentEntityGroup } from './StudentEntityGroup';
import {
    StudentEntityGroupFromJSON,
    StudentEntityGroupFromJSONTyped,
    StudentEntityGroupToJSON
} from './StudentEntityGroup';

/**
 *
 * @export
 * @interface StudentEntity
 */
export interface StudentEntity {
    /**
     * Student id
     * @type {string}
     * @memberof StudentEntity
     */
    id: string;
    /**
     * Student email
     * @type {string}
     * @memberof StudentEntity
     */
    email: string;
    /**
     * Student first name
     * @type {string}
     * @memberof StudentEntity
     */
    firstName: string;
    /**
     * Student last name
     * @type {string}
     * @memberof StudentEntity
     */
    lastName: string;
    /**
     * Student role
     * @type {string}
     * @memberof StudentEntity
     */
    role: string;
    /**
     * Student group id
     * @type {object}
     * @memberof StudentEntity
     */
    groupId: object;
    /**
     * Student career id
     * @type {number}
     * @memberof StudentEntity
     */
    careerId: number;
    /**
     * Date when student was deleted
     * @type {object}
     * @memberof StudentEntity
     */
    deleted: object;
    /**
     * Date when student was created
     * @type {Date}
     * @memberof StudentEntity
     */
    createdAt: Date;
    /**
     * Date when student was updated
     * @type {Date}
     * @memberof StudentEntity
     */
    updatedAt: Date;
    /**
     *
     * @type {StudentEntityGroup}
     * @memberof StudentEntity
     */
    group: StudentEntityGroup;
}

/**
 * Check if a given object implements the StudentEntity interface.
 */
export function instanceOfStudentEntity(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && 'id' in value;
    isInstance = isInstance && 'email' in value;
    isInstance = isInstance && 'firstName' in value;
    isInstance = isInstance && 'lastName' in value;
    isInstance = isInstance && 'role' in value;
    isInstance = isInstance && 'groupId' in value;
    isInstance = isInstance && 'careerId' in value;
    isInstance = isInstance && 'deleted' in value;
    isInstance = isInstance && 'createdAt' in value;
    isInstance = isInstance && 'updatedAt' in value;
    isInstance = isInstance && 'group' in value;

    return isInstance;
}

export function StudentEntityFromJSON(json: any): StudentEntity {
    return StudentEntityFromJSONTyped(json, false);
}

export function StudentEntityFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): StudentEntity {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        id: json['id'],
        email: json['email'],
        firstName: json['firstName'],
        lastName: json['lastName'],
        role: json['role'],
        groupId: json['groupId'],
        careerId: json['careerId'],
        deleted: json['deleted'],
        createdAt: new Date(json['createdAt']),
        updatedAt: new Date(json['updatedAt']),
        group: StudentEntityGroupFromJSON(json['group'])
    };
}

export function StudentEntityToJSON(value?: StudentEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        id: value.id,
        email: value.email,
        firstName: value.firstName,
        lastName: value.lastName,
        role: value.role,
        groupId: value.groupId,
        careerId: value.careerId,
        deleted: value.deleted,
        createdAt: value.createdAt.toISOString(),
        updatedAt: value.updatedAt.toISOString(),
        group: StudentEntityGroupToJSON(value.group)
    };
}
