/* tslint:disable */
/* eslint-disable */
/**
 * EVA API
 * The EVA API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CourseEntity } from './CourseEntity';
import {
    CourseEntityFromJSON,
    CourseEntityFromJSONTyped,
    CourseEntityToJSON
} from './CourseEntity';
import type { StudentInGroup } from './StudentInGroup';
import {
    StudentInGroupFromJSON,
    StudentInGroupFromJSONTyped,
    StudentInGroupToJSON
} from './StudentInGroup';

/**
 * Student group
 * @export
 * @interface StudentEntityGroup
 */
export interface StudentEntityGroup {
    /**
     * Group id
     * @type {string}
     * @memberof StudentEntityGroup
     */
    id: string;
    /**
     * Group name
     * @type {string}
     * @memberof StudentEntityGroup
     */
    name: string;
    /**
     * Career id
     * @type {number}
     * @memberof StudentEntityGroup
     */
    careerId: number;
    /**
     * Date when group was created
     * @type {Date}
     * @memberof StudentEntityGroup
     */
    createdAt: Date;
    /**
     * Date when group was updated
     * @type {Date}
     * @memberof StudentEntityGroup
     */
    updatedAt: Date;
    /**
     * Students in group
     * @type {Array<StudentInGroup>}
     * @memberof StudentEntityGroup
     */
    students: Array<StudentInGroup>;
    /**
     * Courses assigned to the group
     * @type {Array<CourseEntity>}
     * @memberof StudentEntityGroup
     */
    courses: Array<CourseEntity>;
}

/**
 * Check if a given object implements the StudentEntityGroup interface.
 */
export function instanceOfStudentEntityGroup(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && 'id' in value;
    isInstance = isInstance && 'name' in value;
    isInstance = isInstance && 'careerId' in value;
    isInstance = isInstance && 'createdAt' in value;
    isInstance = isInstance && 'updatedAt' in value;
    isInstance = isInstance && 'students' in value;
    isInstance = isInstance && 'courses' in value;

    return isInstance;
}

export function StudentEntityGroupFromJSON(json: any): StudentEntityGroup {
    return StudentEntityGroupFromJSONTyped(json, false);
}

export function StudentEntityGroupFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): StudentEntityGroup {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        id: json['id'],
        name: json['name'],
        careerId: json['careerId'],
        createdAt: new Date(json['createdAt']),
        updatedAt: new Date(json['updatedAt']),
        students: (json['students'] as Array<any>).map(StudentInGroupFromJSON),
        courses: (json['courses'] as Array<any>).map(CourseEntityFromJSON)
    };
}

export function StudentEntityGroupToJSON(value?: StudentEntityGroup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        id: value.id,
        name: value.name,
        careerId: value.careerId,
        createdAt: value.createdAt.toISOString(),
        updatedAt: value.updatedAt.toISOString(),
        students: (value.students as Array<any>).map(StudentInGroupToJSON),
        courses: (value.courses as Array<any>).map(CourseEntityToJSON)
    };
}
