/* tslint:disable */
/* eslint-disable */
/**
 * EVA API
 * The EVA API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CourseDTOAbout } from './CourseDTOAbout';
import {
    CourseDTOAboutFromJSON,
    CourseDTOAboutFromJSONTyped,
    CourseDTOAboutToJSON
} from './CourseDTOAbout';
import type { CourseDTOGeneralObjective } from './CourseDTOGeneralObjective';
import {
    CourseDTOGeneralObjectiveFromJSON,
    CourseDTOGeneralObjectiveFromJSONTyped,
    CourseDTOGeneralObjectiveToJSON
} from './CourseDTOGeneralObjective';
import type { CourseDTOSpecificObjective } from './CourseDTOSpecificObjective';
import {
    CourseDTOSpecificObjectiveFromJSON,
    CourseDTOSpecificObjectiveFromJSONTyped,
    CourseDTOSpecificObjectiveToJSON
} from './CourseDTOSpecificObjective';
import type { CourseDTOTeacher } from './CourseDTOTeacher';
import {
    CourseDTOTeacherFromJSON,
    CourseDTOTeacherFromJSONTyped,
    CourseDTOTeacherToJSON
} from './CourseDTOTeacher';
import type { TaskInCourse } from './TaskInCourse';
import {
    TaskInCourseFromJSON,
    TaskInCourseFromJSONTyped,
    TaskInCourseToJSON
} from './TaskInCourse';

/**
 *
 * @export
 * @interface CourseDTO
 */
export interface CourseDTO {
    /**
     * Course id
     * @type {string}
     * @memberof CourseDTO
     */
    id: string;
    /**
     * Course name
     * @type {string}
     * @memberof CourseDTO
     */
    name: string;
    /**
     *
     * @type {CourseDTOAbout}
     * @memberof CourseDTO
     */
    about: CourseDTOAbout | null;
    /**
     *
     * @type {CourseDTOGeneralObjective}
     * @memberof CourseDTO
     */
    generalObjective: CourseDTOGeneralObjective;
    /**
     *
     * @type {CourseDTOSpecificObjective}
     * @memberof CourseDTO
     */
    specificObjective: CourseDTOSpecificObjective;
    /**
     *
     * @type {CourseDTOTeacher}
     * @memberof CourseDTO
     */
    teacher: CourseDTOTeacher;
    /**
     * Courses tasks
     * @type {Array<TaskInCourse>}
     * @memberof CourseDTO
     */
    tasks: Array<TaskInCourse>;
}

/**
 * Check if a given object implements the CourseDTO interface.
 */
export function instanceOfCourseDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && 'id' in value;
    isInstance = isInstance && 'name' in value;
    isInstance = isInstance && 'about' in value;
    isInstance = isInstance && 'generalObjective' in value;
    isInstance = isInstance && 'specificObjective' in value;
    isInstance = isInstance && 'teacher' in value;
    isInstance = isInstance && 'tasks' in value;

    return isInstance;
}

export function CourseDTOFromJSON(json: any): CourseDTO {
    return CourseDTOFromJSONTyped(json, false);
}

export function CourseDTOFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): CourseDTO {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        id: json['id'],
        name: json['name'],
        about: CourseDTOAboutFromJSON(json['about']),
        generalObjective: CourseDTOGeneralObjectiveFromJSON(json['generalObjective']),
        specificObjective: CourseDTOSpecificObjectiveFromJSON(json['specificObjective']),
        teacher: CourseDTOTeacherFromJSON(json['teacher']),
        tasks: (json['tasks'] as Array<any>).map(TaskInCourseFromJSON)
    };
}

export function CourseDTOToJSON(value?: CourseDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        id: value.id,
        name: value.name,
        about: CourseDTOAboutToJSON(value.about),
        generalObjective: CourseDTOGeneralObjectiveToJSON(value.generalObjective),
        specificObjective: CourseDTOSpecificObjectiveToJSON(value.specificObjective),
        teacher: CourseDTOTeacherToJSON(value.teacher),
        tasks: (value.tasks as Array<any>).map(TaskInCourseToJSON)
    };
}
