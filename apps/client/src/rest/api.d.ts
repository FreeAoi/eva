/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/api/course': {
        post: operations['CourseController_createCourse'];
    };
    '/api/course/{courseId}': {
        get: operations['CourseController_getCourse'];
        patch: operations['CourseController_updateCourse'];
    };
    '/api/student/me': {
        get: operations['StudentController_getMe'];
        put: operations['StudentController_updateStudent'];
    };
    '/api/student/create': {
        post: operations['StudentController_registerStudent'];
    };
    '/api/task/{taskId}': {
        get: operations['TaskController_getTask'];
    };
    '/api/task/{taskId}/submit': {
        post: operations['TaskController_submitTask'];
    };
    '/api/task': {
        post: operations['TaskController_createTask'];
    };
    '/api/task/{taskId}/submissions': {
        get: operations['TaskController_getSubmissions'];
    };
    '/api/task/{taskId}/submissions/{submissionId}': {
        post: operations['TaskController_qualifySubmission'];
    };
    '/api/auth/login': {
        post: operations['AuthController_login'];
    };
    '/api/teacher': {
        get: operations['TeacherController_getTeacher'];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        CreateCourseDTO: {
            /**
             * @description Course id
             * @example CS-101
             */
            courseId: string;
            /**
             * @description Course name
             * @example Introduction to Computer Science
             */
            name: string;
            /**
             * @description Course instructor id
             * @example 2022-0381A
             */
            teacherId: string;
            /**
             * @description Group id
             * @example ICS-1
             */
            groupId: string;
        };
        TeacherInCourse: {
            /**
             * @description Teacher first name
             * @example Federico
             */
            firstName: string;
            /**
             * @description Teacher last name
             * @example Diaz
             */
            lastName: string;
        };
        TaskInCourse: {
            /** @description The id of the task */
            id: number;
            /** @description The title of the task */
            title: string;
            /** @description The due date of the task */
            dueDate: string;
        };
        CourseDTO: {
            /**
             * @description Course id
             * @example BEAU
             */
            id: string;
            /**
             * @description Course name
             * @example Bases de datos avanzadas
             */
            name: string;
            /**
             * @description Course description
             * @example Some beautiful description
             */
            about: string | null;
            /**
             * @description Course general objective
             * @example Some beautiful general objective
             */
            generalObjective: string | null;
            /**
             * @description Course specific objective
             * @example Some beautiful specific objective
             */
            specificObjective: string | null;
            /** @description Teacher data */
            teacher: components['schemas']['TeacherInCourse'];
            /** @description Courses tasks */
            tasks: components['schemas']['TaskInCourse'][];
        };
        UpdateCourseDTO: {
            /**
             * @description Course id
             * @example CS-101
             */
            courseId?: string;
            /**
             * @description Course name
             * @example Introduction to Computer Science
             */
            name?: string;
            /**
             * @description Course instructor id
             * @example 2022-0381A
             */
            teacherId?: string;
        };
        CourseInGroupInStudent: {
            /**
             * @description Course id
             * @example BEAU
             */
            id: string;
            /**
             * @description Course name
             * @example Bases de datos avanzadas
             */
            name: string;
            /**
             * @description Teacher id
             * @example 2022-0381U
             */
            teacherId: string;
        };
        GroupInStudent: {
            /**
             * @description Group id
             * @example 1M3-CO
             */
            id: string;
            /**
             * @description Group name
             * @example Computer science I year
             */
            name: string;
            /** @description Group courses */
            courses: components['schemas']['CourseInGroupInStudent'][];
        };
        StudentDTO: {
            /**
             * @description Student id
             * @example 2022-0381U
             */
            id: string;
            /**
             * @description Student email
             * @example uwu@gmail.com
             */
            email: string;
            /**
             * @description Student first name
             * @example John
             */
            firstName: string;
            /**
             * @description Student last name
             * @example Doe
             */
            lastName: string;
            /**
             * @description Student role
             * @example STUDENT
             * @enum {string}
             */
            role: 'STUDENT' | 'TEACHER';
            /**
             * @description Student description
             * @example some description
             */
            description: string | null;
            /**
             * @description Student description
             * @example some description
             */
            city: string | null;
            /** @description Student avatar */
            avatar: string;
            /** @description Student career data */
            career: Record<string, never>;
            /** @description Student group data */
            group: components['schemas']['GroupInStudent'];
        };
        RegisterStudentDTO: {
            /**
             * @description Student id
             * @example 2022-0381U
             */
            id: string;
            /**
             * @description Student email
             * @example uwu@gmail.com
             */
            email: string;
            /**
             * @description Student first name
             * @example John
             */
            firstName: string;
            /**
             * @description Student last name
             * @example Doe
             */
            lastName: string;
            /**
             * @description Student career id
             * @example 1
             */
            careerId: number;
            /**
             * @description Student password
             * @example somepassword
             */
            password: string;
        };
        UpdateStudentDTO: {
            /**
             * @description Student password
             * @example somepassword
             */
            password?: string;
            /**
             * @description Student description
             * @example some description
             */
            description?: string | null;
            /**
             * @description Student description
             * @example some description
             */
            city?: string | null;
            /**
             * Format: binary
             * @description user avatar
             */
            avatar?: string;
        };
        AttachmentSubmissionDTO: {
            /** @description The name of the attachment */
            name: string;
            /** @description The url of the attachment */
            url: string;
        };
        TeacherSubmissionDTO: {
            /**
             * @description Teacher first name
             * @example Federico
             */
            firstName: string;
            /**
             * @description Teacher last name
             * @example Diaz
             */
            lastName: string;
        };
        StudentSubmissionDTO: {
            /** @description Submission id */
            id: number;
            /** @description Student id */
            studentId: string;
            /** @description Submission score */
            score: number;
            /** @description Submission comment */
            comment: string;
            /** @description Submission created at */
            createdAt: string;
            /**
             * @description check if submission is qualified
             * @default false
             */
            qualified: boolean;
            /** @description Submission updated at */
            updatedAt: string;
            /** @description Task submission attachments */
            attachments: components['schemas']['AttachmentSubmissionDTO'][];
            /** @description Teacher who qualified the submission */
            teacher: components['schemas']['TeacherSubmissionDTO'];
        };
        TaskDTO: {
            /** @description The id of the task */
            id: number;
            /** @description The title of the task */
            title: string;
            /** @description The max score of the task */
            maxScore: number;
            /** @description The due date of the task */
            dueDate: string;
            /** @description Task submission */
            submissions: components['schemas']['StudentSubmissionDTO'][] | null;
        };
        CreateTaskDTO: {
            title: string;
            maxScore: string;
            dueDate: string;
            /** Format: binary */
            file: string;
        };
        QualifySubmissionDTO: {
            /** @description score submission */
            score: number;
            /** @description comment submission */
            comment: string;
        };
        LoginDTO: {
            /** @description User email */
            email: string;
            /** @description User password */
            password: string;
        };
        AcessTokenDTO: {
            /**
             * @description JWT Access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJpYXQiOjE1NjY3MzQ2MjAsImV4cCI6MTU2NjczNjQyMH0.9lQfJFVgJOxUx8Hr6pJZrjD7v1IgA6M7yf2jyXUz0xU
             */
            access_token: string;
        };
        TeacherCourses: {
            /**
             * @description Course id
             * @example BEAU
             */
            id: string;
            /**
             * @description Course name
             * @example Bases de datos avanzadas
             */
            name: string;
            /**
             * @description Teacher id
             * @example 2022-0381U
             */
            teacherId: string;
        };
        TeacherDTO: {
            /**
             * @description Teacher id
             * @example 2022-0381U
             */
            id: string;
            /**
             * @description Teacher email
             * @example federicoxd@gmail.com
             */
            email: string;
            /**
             * @description Teacher first name
             * @example Federico
             */
            firstName: string;
            /**
             * @description Teacher last name
             * @example Diaz
             */
            lastName: string;
            /**
             * @description Teacher role
             * @default TEACHER
             * @example TEACHER
             * @enum {string}
             */
            role: 'STUDENT' | 'TEACHER';
            /**
             * @description Teacher avatar
             * @example avatar
             */
            avatar: string;
            /** @description Teacher courses */
            courses: components['schemas']['TeacherCourses'][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
    CourseController_createCourse: {
        parameters: {
            header: {
                /** @description Bearer token */
                Authorization: string;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateCourseDTO'];
            };
        };
        responses: {
            /** @description Course created successfully */
            200: {
                content: {
                    'application/json': components['schemas']['CourseDTO'];
                };
            };
            /** @description Unauthorized */
            401: never;
            /** @description Not enough permissions */
            403: never;
        };
    };
    CourseController_getCourse: {
        parameters: {
            path: {
                /**
                 * @description Course id
                 * @example CS-101
                 */
                courseId: string;
            };
        };
        responses: {
            /** @description Course data */
            200: {
                content: {
                    'application/json': components['schemas']['CourseDTO'];
                };
            };
        };
    };
    CourseController_updateCourse: {
        parameters: {
            header: {
                /** @description Bearer token */
                Authorization: string;
            };
            path: {
                /**
                 * @description Course id
                 * @example CS-101
                 */
                courseId: Record<string, never>;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateCourseDTO'];
            };
        };
        responses: {
            /** @description Course updated successfully */
            200: {
                content: {
                    'application/json': components['schemas']['CourseDTO'];
                };
            };
            /** @description Unauthorized */
            401: never;
            /** @description Not enough permissions */
            403: never;
            /** @description Course not found */
            404: never;
        };
    };
    StudentController_getMe: {
        responses: {
            /** @description Student data */
            202: {
                content: {
                    'application/json': components['schemas']['StudentDTO'];
                };
            };
        };
    };
    StudentController_updateStudent: {
        requestBody: {
            content: {
                'multipart/form-data': components['schemas']['UpdateStudentDTO'];
            };
        };
        responses: {
            /** @description Student updated */
            202: {
                content: {
                    'application/json': components['schemas']['StudentDTO'];
                };
            };
        };
    };
    StudentController_registerStudent: {
        requestBody: {
            content: {
                'application/json': components['schemas']['RegisterStudentDTO'];
            };
        };
        responses: {
            /** @description Student created */
            202: {
                content: {
                    'application/json': components['schemas']['StudentDTO'];
                };
            };
        };
    };
    TaskController_getTask: {
        parameters: {
            query: {
                /** @description Student id */
                filter?: string;
            };
            header: {
                /** @description Bearer token */
                Authorization: string;
            };
            path: {
                /** @description Task id */
                taskId: string;
            };
        };
        responses: {
            /** @description Task found */
            200: {
                content: {
                    'application/json': components['schemas']['TaskDTO'];
                };
            };
        };
    };
    TaskController_submitTask: {
        parameters: {
            header: {
                /** @description Bearer token */
                Authorization: string;
            };
            path: {
                /** @description Task id */
                taskId: string;
            };
        };
        requestBody: {
            content: {
                'multipart/form-data': {
                    /** Format: binary */
                    file?: string;
                };
            };
        };
        responses: {
            201: never;
        };
    };
    TaskController_createTask: {
        parameters: {
            query: {
                courseId: string;
            };
            header: {
                /** @description Bearer token */
                Authorization: string;
            };
        };
        requestBody: {
            content: {
                'multipart/form-data': components['schemas']['CreateTaskDTO'];
            };
        };
        responses: {
            201: never;
        };
    };
    TaskController_getSubmissions: {
        parameters: {
            path: {
                /** @description Task id */
                taskId: string;
            };
        };
        responses: {
            /** @description Task found */
            200: {
                content: {
                    'application/json': components['schemas']['StudentSubmissionDTO'][];
                };
            };
        };
    };
    TaskController_qualifySubmission: {
        parameters: {
            header: {
                /** @description Bearer token */
                Authorization: string;
            };
            path: {
                /** @description Task id */
                taskId: string;
                /** @description Submission id */
                submissionId: string;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['QualifySubmissionDTO'];
            };
        };
        responses: {
            /** @description Task found */
            200: {
                content: {
                    'application/json': components['schemas']['StudentSubmissionDTO'];
                };
            };
        };
    };
    AuthController_login: {
        requestBody: {
            content: {
                'application/json': components['schemas']['LoginDTO'];
            };
        };
        responses: {
            /** @description User authenticated */
            202: {
                content: {
                    'application/json': components['schemas']['AcessTokenDTO'];
                };
            };
        };
    };
    TeacherController_getTeacher: {
        responses: {
            /** @description Get teacher */
            202: {
                content: {
                    'application/json': components['schemas']['TeacherDTO'];
                };
            };
        };
    };
}
